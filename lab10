#include <iostream>
#include <list>
using namespace std;

struct Node {
    // A node will 2 entities
    //1. data type int called label
    //2. a int type list called neighbours

    int label;
    list<int> neighbours;
};

struct Graph {
    //graph will have an array of type "node" with length specified by n
    int n = 8;
    Node* nodes = new Node[n+1];

    void initializeNodes() {
        //iterate through the nodes and assign labels
        for (int i = 1; i <= n; i++) {
            nodes[i].label = i;
        }
    }

    void addEdge(int u, int v) {
        //select node u and push v into u's neighbour
        nodes[u].neighbours.push_back(v);

        //select node v and push u into v's neighbour
        nodes[v].neighbours.push_back(u);
    }

    void print() {
        //lets iterate through each node and print its neighbours
        for (int i = 1; i <= n; i++) {
            cout << "Node " << i << " --> ";
            for (int neighbour : nodes[i].neighbours) {
                cout << neighbour << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Graph* g = new Graph;
    g->initializeNodes();

    // Add edges for the graph here
    g->addEdge(1, 2);
    g->addEdge(1, 3);
    g->addEdge(1, 4);
    g->addEdge(1, 5);
    //g->addEdge(2, 1);
    g->addEdge(2, 3);
    g->addEdge(2, 6);
    //g->addEdge(3, 1);
    //g->addEdge(3, 2);
    //g->addEdge(4, 1);
    g->addEdge(4, 6);
    g->addEdge(4, 7);
    g->addEdge(4, 8);
    //g->addEdge(5, 1);
    g->addEdge(5, 6);
    g->addEdge(5, 7);
    g->addEdge(5, 8);
    //g->addEdge(6, 2);
    //g->addEdge(6, 4);
    //g->addEdge(6, 5);
    //g->addEdge(7, 4);
    //g->addEdge(7, 5);
    //g->addEdge(8, 4);
    //g->addEdge(8, 5);



    // Print the graph adjacency list
    g->print();
    delete g;
    return 0;
}
